<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Module | Null Space]]></title>
  <link href="http://Aquietzero.github.com/blog/categories/module/atom.xml" rel="self"/>
  <link href="http://Aquietzero.github.com/"/>
  <updated>2012-10-10T10:56:31+08:00</updated>
  <id>http://Aquietzero.github.com/</id>
  <author>
    <name><![CDATA[zero]]></name>
    <email><![CDATA[zhaoyunhaosss@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On NodeJs Modules]]></title>
    <link href="http://Aquietzero.github.com/blog/2012/09/11/on-nodejs-modules/"/>
    <updated>2012-09-11T10:18:00+08:00</updated>
    <id>http://Aquietzero.github.com/blog/2012/09/11/on-nodejs-modules</id>
    <content type="html"><![CDATA[<p>对于Node的初学者来说，可能对模块化方面比较模糊，网上的资料比较分散，在此总结一下。</p>

<h2>require 和 exports</h2>

<p>个人感觉客户端js的最大缺点就是模块化难，原因有二：</p>

<ol>
<li>JavaScript没有类的概念，虽然可以用一些方法来模拟类，但是远没有直接用<code>class</code>定义来得直接，针对这个缺点，可以用<strong>CoffeeScript</strong>来替代，但在下一篇文章会说说如何用JavaScript来模拟类。</li>
<li>JavaScript没有包含文件的功能，这就导致了必须自己来组织文件的顺序，从而在<code>index.html</code>里面按顺序把包含的<code>.js</code>文件一一列出。当然还有其他的方式，但是原理还是如此。使用工具的话推荐<a href="https://github.com/jrburke/requirejs">RequireJs</a>以及<a href="https://github.com/substack/node-browserify">browserify</a>，但使用起来依然不是那么方便。</li>
</ol>


<p>为此，在Node里面就方便很多了，其默认将各个文件看作是各个独立的<strong>Module</strong>，即在一个文件里面定义的变量，函数都不为其他文件所见，下面举个简单的例子。比如在文件<code>add.js</code>如下：</p>

<p><code>javascript
// add.js
var file_name = 'add.js';
var add = function(a, b) { return a + b; }
</code></p>

<p>那么在别的文件是不能访问<code>file_name</code>这个变量以及<code>add</code>这个函数的，如果要在别的文件里面使用它们，那么就必须先把它们<strong>暴露</strong>到这一个文件模块的外部，可以用如下的方式：</p>

<p>``` javascript
// add.js
var file_name = 'add.js';
var add = function(a, b) { return a + b; }</p>

<p>exports.file_name = file_name;
exports.add = add;
```</p>

<p>这样，我们就可以在别的文件使用这些变量了，在<code>use.js</code>里面使用方式如下：</p>

<p>``` javascript
// use.js
var add_file = require('./add');</p>

<p>console.log(add_file.file_name); // output => add.js
console.log(add_file.add(3, 4)); // output => 7
```</p>

<p>由此可以看出，在<code>add.js</code>里面，我们把需要暴露的变量绑定到<code>exports</code>对象上面，然后真正返回出去的实际上是<code>exports</code>对象，在<code>use.js</code>里面调用<code>require</code>语句的时候，返回出来的<code>exports</code>对象被<code>add_file</code>变量接住了，所以就可以使用那些本来绑定在<code>exports</code>对象上面的变量了。</p>

<h2>exports 和 module.exports</h2>

<p>既然<code>exports</code>是这样的一个对象，那么我们也可以这样进行绑定，比如<code>person.js</code>如下：</p>

<p>``` javascript
// person.js
var Person = function(name, age) {</p>

<pre><code>this.name = name;
this.age  = age;
</code></pre>

<p>}</p>

<p>Person.prototype = {</p>

<pre><code>introduce: function() {
    console.log('I am ' + this.name + '.');
    console.log('I am ' + this.age + ' years old.');
}
</code></pre>

<p>}</p>

<p>module.exports = Person;
// exports = Person; DOES NOT WORK!
```</p>

<p>然后在<code>class.js</code>里面调用：</p>

<p>``` javascript
// class.js
var Person = require('./person');</p>

<p>var class = [</p>

<pre><code>new Person('Tom'  , 13),
new Person('Jim'  , 12),
new Person('Mary' , 12)
</code></pre>

<p>];</p>

<p>class.map(function(person) {</p>

<pre><code>person.introduce();
</code></pre>

<p>});</p>

<p>/<em>*
 * output:
 * I am Tom. I am 13 years old.
 * I am Jim. I am 12 years old.
 * I am Han meimei. I am 13 years old.
 </em>/
```</p>

<p>可以看出，这个时候把<code>Person</code>作为整个模块的输出，那么<code>exports</code>和<code>module.exports</code>有什么区别呢？<strong>实际上，<code>exports</code>只是<code>module.exports</code>的一个helper，<code>exports</code>的作用在于收集需要暴露的变量，并将其包装为一个对象交给<code>module.exports</code>进行输出，所以<code>exports = Person</code>没有任何效果，<code>Person</code>没有绑定到<code>exports</code>。</strong>既然这样，写的时候就必须注意了，因为<code>exports</code>最后会交给<code>module.exports</code>进行输出，所以如果这两者同时存在，绑定到<code>exports</code>的变量会被<code>module.exports</code>的值所覆盖，即：</p>

<p><code>javascript
module.exports = Person;
exports.something = 9; // `something` is blocked.
</code></p>

<h2>模块化组织</h2>

<p>明白了上面所说的以后，进行模块化组织就很方便了，看看如下的文件结构：</p>

<pre><code>└─┬─ lib
  │   ├── add.js
  │   ├── sub.js
  │   └── math.js
  └─ use.js
</code></pre>

<p>个文件如下：</p>

<p>``` javascript
// add.js
var add = function(a, b) {</p>

<pre><code>return a + b;
</code></pre>

<p>}
module.exports = add;</p>

<p>// sub.js
var sub = function(a, b) {</p>

<pre><code>return a - b;
</code></pre>

<p>}
module.exports = add;</p>

<p>// math.js
module.exports = {</p>

<pre><code>add: require('./add'),
sub: require('./sub'),
</code></pre>

<p>}</p>

<p>// use.js
var math = require('./lib/math');</p>

<p>console.log(math.add(3, 4)); // output =>  7
console.log(math.sub(3, 4)); // output => -1
```</p>
]]></content>
  </entry>
  
</feed>
